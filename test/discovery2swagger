#!/usr/bin/env node
'use strict';

const assert = require('assert');
const _ = require('lodash');
const fs = require('fs');
const mkdirp = require('mkdirp').sync;
const discoveryToOpenAPI = require('../src/index.js');
discoveryToOpenAPI.setStrict(true);
const validator = require('oas-validator');
const fetch = require('node-fetch');

async function main() {
  const response = await fetch('https://www.googleapis.com/discovery/v1/apis');
  const data = await response.text();
  assert(response.ok, 'Can not GET API list: ' + response.statusMessage);
  await processList(data);
}

if (!process.argv[2]) {
  console.log('missing directory name');
  process.exit(1);
}

mkdirp(process.argv[2]);
process.chdir(process.argv[2]);

main();

async function processList(data) {
  try {
    data = JSON.parse(data);
  }
  catch (ex) {
    console.warn(ex.message);
    data = {};
  }
  assert.equal(data.kind, 'discovery#directoryList');
  assert.equal(data.discoveryVersion, 'v1');

  console.log('APIs',data.items.length);

  for (let api of data.items) {
    //FIXME: data.preferred
    console.log('Downloading ' + api.discoveryRestUrl + ' ...');
    const response = await fetch(api.discoveryRestUrl);
    const data = await response.text();
    if (response.ok) {
      processAPI(data);
    }
    else {
      console.warn('Can not GET ' + api.discoveryRestUrl + ': ' + response.statusMessage);
    }
  }
}

function processAPI(data) {
  if (!data) return true;
  try {
    data = JSON.parse(data);
  }
  catch (ex) {
    console.warn(ex.message);
    return true;
  }
  assert.equal(data.kind, 'discovery#restDescription');

  //blocklist
  if ([
         //missing API description
         'cloudlatencytest:v2',
         //asterisk in path
         'admin:directory_v1',
         //circular reference in MapFolder/MapItem
         'mapsengine:exp2',
         'mapsengine:v1',
       ].indexOf(data.id) >= 0) {
      return true;
  }

  console.log('Processing: ' + data.id);
  var openapi = discoveryToOpenAPI.convert(data);

  validateOpenAPI(openapi, function (err, obj) {
    saveOpenAPI(data.name, data.version, obj, err);
  });
  return true;
}

function saveOpenAPI(name, version, openapi, err) {
  var path = name + '/';
  path += version + '/';
  mkdirp(path);
  if (err) path += 'err_';
  path += 'openapi.json';
  var strOpenAPI = JSON.stringify(openapi, null, 2);
  fs.writeFileSync(path, strOpenAPI, 'utf8');
}

function validateOpenAPI(openapi, cb) {
  const options = {};
  validator.validate(openapi, options)
  .then(options => {
    if (!options.valid) {
      console.log(JSON.stringify(openapi, null, 2));
      console.warn(JSON.stringify(validationResults.errors, null, 2));
      process.exitCode = 1;
    }
    cb(!options.valid, openapi);
  })
  .catch(validationError => {
      cb(validationError, openapi);
      console.warn(validationError.message);
      if (options && options.context) {
        console.warn(options.context.pop());
      }
      process.exitCode = 1;
  });
}
